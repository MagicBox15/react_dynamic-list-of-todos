{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","visibleTodos","props","todos","inputFilter","handleSelectChange","event","target","value","setState","filter","todo","completed","prevProps","this","getVisible","selectUser","filtredTodos","title","toLowerCase","includes","className","type","placeholder","onChange","map","id","userId","classNames","htmlFor","readOnly","checked","onClick","React","Component","getData","url","fetch","then","response","json","CurrentUser","user","clearSelectedUser","getUsers","name","email","phone","PureComponent","App","selectedUserId","errorMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fed4eee0.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  selectUser: (userId: number) => void,\n};\n\ntype State = {\n  visibleTodos: Todo[],\n  inputFilter: string,\n};\n\nexport class TodoList extends React.Component <Props, State> {\n  state = {\n    visibleTodos: this.props.todos,\n    inputFilter: '',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.todos !== this.props.todos) {\n      this.getVisible();\n    }\n  }\n\n  getVisible() {\n    this.setState({ visibleTodos: this.props.todos });\n  }\n\n  handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    switch (value) {\n      case ('active'):\n        this.setState({\n          visibleTodos: this.props.todos.filter(todo => !todo.completed),\n        });\n        break;\n\n      case ('completed'):\n        this.setState({\n          visibleTodos: this.props.todos.filter(todo => todo.completed),\n        });\n        break;\n\n      default:\n        this.setState({\n          visibleTodos: this.props.todos,\n        });\n        break;\n    }\n  };\n\n  render() {\n    const { visibleTodos, inputFilter } = this.state;\n    const { selectUser } = this.props;\n\n    const filtredTodos = visibleTodos.filter(todo => (\n      todo.title.toLowerCase().includes(inputFilter.toLowerCase())));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <form className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            value={inputFilter}\n            placeholder=\"Search\"\n            onChange={event => (\n              this.setState({ inputFilter: event.target.value })\n            )}\n          />\n          <select\n            className=\"TodoList__select\"\n            onChange={this.handleSelectChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n\n            {filtredTodos.map(todo => {\n              const {\n                id, title, userId, completed,\n              } = todo;\n\n              return (\n                <li\n                  key={id}\n                  className={classNames('TodoList__item', `TodoList__item--${\n                    completed ? 'checked' : 'unchecked'\n                  }`)}\n                >\n                  <label htmlFor=\"input\">\n                    <input\n                      id=\"input\"\n                      type=\"checkbox\"\n                      readOnly\n                      checked={completed}\n                    />\n                    <p>{title}</p>\n                  </label>\n\n                  <button\n                    className=\"TodoList__user-button button\"\n                    type=\"button\"\n                    onClick={() => {\n                      selectUser(userId);\n                    }}\n                  >\n                    {`User #${userId}`}\n                  </button>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getData = (url: string) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(response => response.json());\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getData } from '../../api/api';\n\ntype Props = {\n  userId: number,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.PureComponent<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.getUsers();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUsers();\n    }\n  }\n\n  clearSelectedUser = () => {\n    this.setState({ user: null });\n  };\n\n  getUsers = () => {\n    getData(`/users/${this.props.userId}`)\n      .then(user => {\n        this.setState({ user });\n      });\n  };\n\n  render() {\n    const { user } = this.state;\n    const { userId } = this.props;\n\n    return (\n      user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${userId}`}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n          <button\n            type=\"button\"\n            className=\"CurrentUser__clear\"\n            onClick={this.clearSelectedUser}\n          >\n            Clear\n          </button>\n        </div>\n      ));\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getData } from './api/api';\n\ninterface State {\n  todos: Todo[],\n  selectedUserId: number,\n  errorMessage: string,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 1,\n    errorMessage: '',\n  };\n\n  // async componentDidMount() {\n  //   const todos = await getData('/todos');\n\n  //   this.setState({ todos });\n  // }\n\n  componentDidMount() {\n    getData('/todos')\n      .then(todos => {\n        this.setState({ todos });\n      });\n    // .catch(() => {\n    //   this.setState({ errorMessage: 'Can\\'t load data' });\n    // });\n    // не получается обработать ошибку\n  }\n\n  selectUser = (userId: number) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({ selectedUserId: userId });\n    }\n  };\n\n  render() {\n    const { selectedUserId, todos, errorMessage } = this.state;\n\n    return (\n      <div className=\"App\">\n        {todos ? (\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              selectUser={this.selectUser}\n            />\n          </div>\n        ) : (\n          { errorMessage }\n        )}\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={this.state.selectedUserId} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}